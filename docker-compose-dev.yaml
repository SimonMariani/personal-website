services:
  # The frontend application
  personal-website-frontend:
    container_name: personal-website-frontend
    build:
      context: ./frontend
      target: development
    develop:
      watch:
        # Sync the entire frontend directory when any other file changes
        - action: sync
          path: ./frontend
          target: /app
          ignore:
            - node_modules
        # Rebuild the app container when the package.json file changes
        - action: rebuild
          path: ./frontend/package.json
          target: /app/package.json
        # Sync and restart the app container when the vite.config.js file changes
        - action: sync+restart
          path: ./frontend/vite.config.js
          target: /app/vite.config.js
    ports:
      - 3000:3000
    depends_on:
      personal-website-api:
        condition: service_healthy

  # The api application
  personal-website-api:
    image: personal-website-api
    container_name: personal-website-api
    build:
      context: ./api/
      target: development
    volumes:
      - ./api/:/app/
    healthcheck:
      test: wget -qO- http://localhost:8000/ping || exit 1
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - 8000:8000
    depends_on:
      standalone:
        condition: service_healthy

  # The services for running the database, these are unchanged from the official Milvus documentation: https://milvus.io/docs/install_standalone-docker-compose.md
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.6.2
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MQ_TYPE: woodpecker
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"

  # For development we also run the attu dashboard so we can inspect and manage the Milvus instance
  attu:
    container_name: milvus-attu
    image: zilliz/attu:v2.5.6
    environment:
      MILVUS_URL: milvus-standalone:19530
    ports:
      - "7000:3000"
    depends_on:
      - standalone